// Mocks generated by Mockito 5.0.4 from annotations
// in sequences/test/features/sequences/presentation/bloc/sequence_puzzle_bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter/src/foundation/diagnostics.dart' as _i7;
import 'package:flutter/src/material/circle_avatar.dart' as _i6;
import 'package:flutter/src/widgets/framework.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:sequences/core/error/failures.dart' as _i10;
import 'package:sequences/features/sequences/domain/entities/choice.dart'
    as _i3;
import 'package:sequences/features/sequences/domain/entities/puzzle.dart'
    as _i4;
import 'package:sequences/features/sequences/domain/usecases/create_puzzle.dart'
    as _i8;
import 'package:sequences/features/sequences/presentation/widgets/puzzle_display.dart'
    as _i11;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeEither<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeChoice extends _i1.Fake implements _i3.Choice {}

class _FakePuzzle extends _i1.Fake implements _i4.Puzzle {}

class _FakeWidget extends _i1.Fake implements _i5.Widget {}

class _FakeCircleAvatar extends _i1.Fake implements _i6.CircleAvatar {}

class _FakeStatelessElement extends _i1.Fake implements _i5.StatelessElement {}

class _FakeDiagnosticsNode extends _i1.Fake implements _i7.DiagnosticsNode {}

/// A class which mocks [CreatePuzzle].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreatePuzzle extends _i1.Mock implements _i8.CreatePuzzle {
  MockCreatePuzzle() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i4.Puzzle>> call(_i8.Params? params) =>
      (super.noSuchMethod(Invocation.method(#call, [params]),
              returnValue: Future<_i2.Either<_i10.Failure, _i4.Puzzle>>.value(
                  _FakeEither<_i10.Failure, _i4.Puzzle>()))
          as _i9.Future<_i2.Either<_i10.Failure, _i4.Puzzle>>);
  @override
  _i9.Future<_i2.Either<_i10.Failure, _i4.Puzzle>> generatePuzzle(
          int? size, int? numChoices, _i3.Choice? sampleChoice) =>
      (super.noSuchMethod(
          Invocation.method(#generatePuzzle, [size, numChoices, sampleChoice]),
          returnValue: Future<_i2.Either<_i10.Failure, _i4.Puzzle>>.value(
              _FakeEither<_i10.Failure, _i4.Puzzle>())) as _i9
          .Future<_i2.Either<_i10.Failure, _i4.Puzzle>>);
  @override
  Set<_i3.Choice> generateNumbers(int? count) =>
      (super.noSuchMethod(Invocation.method(#generateNumbers, [count]),
          returnValue: <_i3.Choice>{}) as Set<_i3.Choice>);
  @override
  _i3.Choice createNumberChoice(int? num) =>
      (super.noSuchMethod(Invocation.method(#createNumberChoice, [num]),
          returnValue: _FakeChoice()) as _i3.Choice);
  @override
  _i3.Choice createChoice(_i3.Choice? sample) =>
      (super.noSuchMethod(Invocation.method(#createChoice, [sample]),
          returnValue: _FakeChoice()) as _i3.Choice);
  @override
  List<_i3.Choice> generateChallenge(int? size, Set<_i3.Choice>? choices) =>
      (super.noSuchMethod(
          Invocation.method(#generateChallenge, [size, choices]),
          returnValue: <_i3.Choice>[]) as List<_i3.Choice>);
}

/// A class which mocks [PuzzleDisplay].
///
/// See the documentation for Mockito's code generation for more information.
class MockPuzzleDisplay extends _i1.Mock implements _i11.PuzzleDisplay {
  MockPuzzleDisplay() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Puzzle get puzzle => (super.noSuchMethod(Invocation.getter(#puzzle),
      returnValue: _FakePuzzle()) as _i4.Puzzle);
  @override
  bool get showAll =>
      (super.noSuchMethod(Invocation.getter(#showAll), returnValue: false)
          as bool);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  _i5.Widget build(_i5.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget()) as _i5.Widget);
  @override
  List<_i5.Widget> challengeRow(
          List<_i3.Choice>? challengeList, int? displayLength) =>
      (super.noSuchMethod(
          Invocation.method(#challengeRow, [challengeList, displayLength]),
          returnValue: <_i5.Widget>[]) as List<_i5.Widget>);
  @override
  List<_i5.Widget> choicesRow(Set<_i3.Choice>? setOfChoices) =>
      (super.noSuchMethod(Invocation.method(#choicesRow, [setOfChoices]),
          returnValue: <_i5.Widget>[]) as List<_i5.Widget>);
  @override
  List<_i5.Widget> makeDisplayRow(
          List<_i3.Choice>? choiceList, int? displayLength) =>
      (super.noSuchMethod(
          Invocation.method(#makeDisplayRow, [choiceList, displayLength]),
          returnValue: <_i5.Widget>[]) as List<_i5.Widget>);
  @override
  _i6.CircleAvatar buildChoiceDisplay(_i3.Choice? choice) =>
      (super.noSuchMethod(Invocation.method(#buildChoiceDisplay, [choice]),
          returnValue: _FakeCircleAvatar()) as _i6.CircleAvatar);
  @override
  _i5.StatelessElement createElement() =>
      (super.noSuchMethod(Invocation.method(#createElement, []),
          returnValue: _FakeStatelessElement()) as _i5.StatelessElement);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  void debugFillProperties(_i7.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toStringShallow(
          {String? joiner = r', ',
          _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toStringShallow, [], {#joiner: joiner, #minLevel: minLevel}),
          returnValue: '') as String);
  @override
  String toStringDeep(
          {String? prefixLineOne = r'',
          String? prefixOtherLines,
          _i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(#toStringDeep, [], {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel
          }),
          returnValue: '') as String);
  @override
  _i7.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i7.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode()) as _i7.DiagnosticsNode);
  @override
  List<_i7.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(Invocation.method(#debugDescribeChildren, []),
          returnValue: <_i7.DiagnosticsNode>[]) as List<_i7.DiagnosticsNode>);
  @override
  String toString({_i7.DiagnosticLevel? minLevel = _i7.DiagnosticLevel.info}) =>
      (super.noSuchMethod(
          Invocation.method(#toString, [], {#minLevel: minLevel}),
          returnValue: '') as String);
}
